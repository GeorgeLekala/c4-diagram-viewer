@startuml
!include <C4/C4_Component.puml>

title Component Diagram for Processing Services Engine (Current Loan Application System)

ContainerDb_Ext(database, "Application Database", "Stores application data")
System_Ext(credit_bureau, "Credit Bureau", "Provides credit/fraud data")
System_Ext(banking_system, "Banking System", "Handles bank verification, DebiCheck")
System_Ext(doc_mgmt_system, "Document Management System", "Stores documents")

Container_Boundary(processing_c, "Processing Services Engine") {
    Component(turbo_processors, "Turbo Processors (Phase 1)", "Components like 'TurboProcessor', 'TurboLoanDetailsProcessor'. Handles initial validation, fraud checks, basic qualification.")
    Component(employment_processors, "Employment Processors (Phase 2)", "Components like 'IdpSaveEmploymentStep1Processor', 'IdpSaveEmploymentStep2ApplicantProcessor', 'IdpProcessQualificationProcessor'. Handles saving employment details and related qualifications.")
    Component(financial_address_processors, "Financial & Address Processors (Phase 3)", "Components like 'IdpSaveBankAccountDetailsProcessor', 'IdpSaveAboutYouStep2IncomeExpensesProcessor', 'IdpSaveAddressProcessor', 'IdpProcessApplicationCaptureProcessor'. Handles banking, income/expenses, address, and core application decisioning.")
    Component(quote_processors, "Quote & Offer Processors (Phase 4)", "Components like 'IdpCreateQuoteProcessor', 'IdpGetViewQuotesProcessor', 'IdpAcceptQuoteProcessor', 'IdpDebiCheck...Processors'. Handles quote generation, display, acceptance, and DebiCheck.")
    Component(doc_upload_processors, "Document Upload Processors (Phase 5)", "Component like 'IdpAllowTakeUpProcessor'. Handles processing of uploaded documents and final take-up logic.")

    Rel(turbo_processors, credit_bureau, "Checks credit/fraud", "API")
    Rel(turbo_processors, database, "Saves initial data/status", "DB Calls")

    Rel(employment_processors, database, "Saves employment data", "DB Calls")
    Rel(employment_processors, credit_bureau, "May re-check qualification", "API") 'e.g. IdpProcessQualificationProcessor

    Rel(financial_address_processors, database, "Saves financial/address data", "DB Calls")
    Rel(financial_address_processors, banking_system, "Verifies bank info", "API")
    Rel(financial_address_processors, credit_bureau, "For core decisioning", "API")

    Rel(quote_processors, database, "Saves/Retrieves quote data", "DB Calls")
    Rel(quote_processors, banking_system, "Manages DebiCheck mandate", "API")

    Rel(doc_upload_processors, database, "Updates doc status, finalizes application", "DB Calls")
    Rel(doc_upload_processors, doc_mgmt_system, "Stores documents", "API")

    ' Simplified internal flow depiction
    Rel(turbo_processors, employment_processors, "Triggers/Passes data to")
    Rel(employment_processors, financial_address_processors, "Triggers/Passes data to")
    Rel(financial_address_processors, quote_processors, "Triggers/Passes data to (if approved)")
    Rel(quote_processors, doc_upload_processors, "Triggers/Passes data to (if quote accepted)")
}

' Relationships from an orchestrator (Backend API in Level 2) would call these components
' For simplicity, direct relationships shown here imply sequential or conditional flow.
@enduml